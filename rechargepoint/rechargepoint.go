package rechargepoint

import (
	"fmt"

	"github.com/im7mortal/UTM"
)

var x [65]float64
var y [65]float64

func test() {
	x = [65]float64{384344.40, 393666.47, 392965.18, 392739.20, 393179.35, 395137.59, 396028.14, 393915.67, 399128.11, 399718.98, 390004.64, 393357.74, 387744.17, 392685.05, 399606.43, 384288.67, 384326.10, 394012.69, 396210.91, 393701.40, 394216.33, 393302.00, 393635.43, 394507.22, 399709.83, 393991.84, 393699.20, 387740.00, 393555.60, 404615.06, 393269.54, 393700.51, 393722.58, 392917.24, 394683.74, 393003.59, 392531.54, 394201.73, 393002.11, 393009.37, 393789.54, 393379.50, 393398.41, 390036.05, 395819.88, 393806.99, 386344.93, 390337.95, 392956.03, 403791.06, 393004.26, 394031.25, 392010.26, 389486.96, 397243.81, 398145.14, 393834.57, 397529.05, 394088.74, 394491.84, 388860.08, 391432.02, 394043.11, 392761.86, 393893.50}
	y = [65]float64{5707046.09, 5708462.48, 5707291.31, 5706972.82, 5707548.22, 5708781.01, 5705292.30, 5710460.24, 5712277.15, 5705863.01, 5710035.49, 5707854.53, 5714554.44, 5705932.20, 5709066.94, 5708835.27, 5706693.73, 5708259.71, 5705389.65, 5706907.28, 5708070.71, 5707851.10, 5707861.42, 5706450.57, 5710615.91, 5707983.97, 5707941.59, 5712022.17, 5704706.43, 5710076.30, 5708380.02, 5707846.83, 5708471.82, 5708001.97, 5698230.12, 5707541.36, 5710425.85, 5706274.57, 5707047.02, 5707891.06, 5707718.54, 5707963.23, 5711990.80, 5705874.77, 5708669.05, 5708399.50, 5706482.93, 5706468.34, 5708402.67, 5707995.94, 5706197.88, 5706469.03, 5709085.11, 5701658.04, 5705763.88, 5707194.59, 5707596.42, 5709915.62, 5706323.43, 5706819.16, 5707110.17, 5703867.45, 5710551.54, 5711091.78, 5704872.69}
}

//getNearest takes latitude and longitude and returns a string with the coordinates of the nearest
//charging point
func GetNearest(lat, long float64) string {
	compx, compy, _, _, err := UTM.FromLatLon(lat, long, true)

	if err != nil {
		fmt.Println("Conversion failed")
	}

	var diff float64
	var bestdiff float64
	var besti int
	if compx < x[0] {
		bestdiff = x[0] - compx
	} else {
		bestdiff = compx - x[0]
	}
	if compy < y[0] {
		bestdiff += y[0] - long
	} else {
		bestdiff += compy - y[0]
	}

	for i := 1; i < 65; i++ {
		if compx < x[i] {
			diff = x[i] - compx
		} else {
			diff = compx - x[i]
		}
		if compy < y[i] {
			diff += y[i] - compy
		} else {
			diff += compy - y[i]
		}

		if diff < bestdiff {
			bestdiff = diff
			besti = i
		}

	}
	latitude, longitude, err := UTM.ToLatLon(x[besti], y[besti], 32, "", true)
	if err != nil {
		fmt.Println("conversion error")
		return fmt.Sprintf("")
	}
	return fmt.Sprintf("http://maps.google.com/?q=%f,%f", latitude, longitude)

}

/*
func main() {
	test()
	fmt.Println(GetNearest(51.504642, 7.454562))
}
*/
